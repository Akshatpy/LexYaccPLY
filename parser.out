Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> variable_declaration
Rule 2     statement -> if_else_statement
Rule 3     statement -> function_definition
Rule 4     statement -> expression
Rule 5     statement -> list
Rule 6     statement -> dictionary
Rule 7     variable_declaration -> ID EQUALS value
Rule 8     value -> expression
Rule 9     value -> STRING
Rule 10    value -> list
Rule 11    value -> dictionary
Rule 12    value -> NUMBER
Rule 13    value -> ID
Rule 14    if_else_statement -> IF condition COLON statement ELSE COLON statement
Rule 15    if_else_statement -> IF condition COLON statement
Rule 16    condition -> expression GT expression
Rule 17    condition -> expression LT expression
Rule 18    condition -> expression EQEQ expression
Rule 19    condition -> expression
Rule 20    function_definition -> DEF ID LPAREN arg_list RPAREN COLON statement
Rule 21    arg_list -> ID
Rule 22    arg_list -> ID COMMA arg_list
Rule 23    arg_list -> empty
Rule 24    list -> LBRACKET item_list RBRACKET
Rule 25    item_list -> value
Rule 26    item_list -> value COMMA item_list
Rule 27    item_list -> empty
Rule 28    dictionary -> LBRACE pair_list RBRACE
Rule 29    pair_list -> pair
Rule 30    pair_list -> pair COMMA pair_list
Rule 31    pair_list -> empty
Rule 32    pair -> STRING COLON value
Rule 33    pair -> NUMBER COLON value
Rule 34    expression -> term PLUS term
Rule 35    expression -> term MINUS term
Rule 36    expression -> term
Rule 37    term -> factor TIMES factor
Rule 38    term -> factor DIVIDE factor
Rule 39    term -> factor
Rule 40    factor -> NUMBER
Rule 41    factor -> ID
Rule 42    factor -> LPAREN expression RPAREN
Rule 43    empty -> <empty>

Terminals, with rules where they appear

COLON                : 14 14 15 20 32 33
COMMA                : 22 26 30
DEF                  : 20
DIVIDE               : 38
ELSE                 : 14
EQEQ                 : 18
EQUALS               : 7
GT                   : 16
ID                   : 7 13 20 21 22 41
IF                   : 14 15
LBRACE               : 28
LBRACKET             : 24
LPAREN               : 20 42
LT                   : 17
MINUS                : 35
NUMBER               : 12 33 40
PLUS                 : 34
RBRACE               : 28
RBRACKET             : 24
RPAREN               : 20 42
STRING               : 9 32
TIMES                : 37
error                : 

Nonterminals, with rules where they appear

arg_list             : 20 22
condition            : 14 15
dictionary           : 6 11
empty                : 23 27 31
expression           : 4 8 16 16 17 17 18 18 19 42
factor               : 37 37 38 38 39
function_definition  : 3
if_else_statement    : 2
item_list            : 24 26
list                 : 5 10
pair                 : 29 30
pair_list            : 28 30
statement            : 14 14 15 20 0
term                 : 34 34 35 35 36
value                : 7 25 26 32 33
variable_declaration : 1

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . variable_declaration
    (2) statement -> . if_else_statement
    (3) statement -> . function_definition
    (4) statement -> . expression
    (5) statement -> . list
    (6) statement -> . dictionary
    (7) variable_declaration -> . ID EQUALS value
    (14) if_else_statement -> . IF condition COLON statement ELSE COLON statement
    (15) if_else_statement -> . IF condition COLON statement
    (20) function_definition -> . DEF ID LPAREN arg_list RPAREN COLON statement
    (34) expression -> . term PLUS term
    (35) expression -> . term MINUS term
    (36) expression -> . term
    (24) list -> . LBRACKET item_list RBRACKET
    (28) dictionary -> . LBRACE pair_list RBRACE
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    IF              shift and go to state 9
    DEF             shift and go to state 10
    LBRACKET        shift and go to state 13
    LBRACE          shift and go to state 14
    NUMBER          shift and go to state 16
    LPAREN          shift and go to state 11

    statement                      shift and go to state 1
    variable_declaration           shift and go to state 2
    if_else_statement              shift and go to state 3
    function_definition            shift and go to state 4
    expression                     shift and go to state 5
    list                           shift and go to state 6
    dictionary                     shift and go to state 7
    term                           shift and go to state 12
    factor                         shift and go to state 15

state 1

    (0) S' -> statement .



state 2

    (1) statement -> variable_declaration .

    $end            reduce using rule 1 (statement -> variable_declaration .)
    ELSE            reduce using rule 1 (statement -> variable_declaration .)


state 3

    (2) statement -> if_else_statement .

    $end            reduce using rule 2 (statement -> if_else_statement .)
    ELSE            reduce using rule 2 (statement -> if_else_statement .)


state 4

    (3) statement -> function_definition .

    $end            reduce using rule 3 (statement -> function_definition .)
    ELSE            reduce using rule 3 (statement -> function_definition .)


state 5

    (4) statement -> expression .

    $end            reduce using rule 4 (statement -> expression .)
    ELSE            reduce using rule 4 (statement -> expression .)


state 6

    (5) statement -> list .

    $end            reduce using rule 5 (statement -> list .)
    ELSE            reduce using rule 5 (statement -> list .)


state 7

    (6) statement -> dictionary .

    $end            reduce using rule 6 (statement -> dictionary .)
    ELSE            reduce using rule 6 (statement -> dictionary .)


state 8

    (7) variable_declaration -> ID . EQUALS value
    (41) factor -> ID .

    EQUALS          shift and go to state 17
    TIMES           reduce using rule 41 (factor -> ID .)
    DIVIDE          reduce using rule 41 (factor -> ID .)
    PLUS            reduce using rule 41 (factor -> ID .)
    MINUS           reduce using rule 41 (factor -> ID .)
    $end            reduce using rule 41 (factor -> ID .)
    ELSE            reduce using rule 41 (factor -> ID .)


state 9

    (14) if_else_statement -> IF . condition COLON statement ELSE COLON statement
    (15) if_else_statement -> IF . condition COLON statement
    (16) condition -> . expression GT expression
    (17) condition -> . expression LT expression
    (18) condition -> . expression EQEQ expression
    (19) condition -> . expression
    (34) expression -> . term PLUS term
    (35) expression -> . term MINUS term
    (36) expression -> . term
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 16
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    condition                      shift and go to state 18
    expression                     shift and go to state 19
    term                           shift and go to state 12
    factor                         shift and go to state 15

state 10

    (20) function_definition -> DEF . ID LPAREN arg_list RPAREN COLON statement

    ID              shift and go to state 21


state 11

    (42) factor -> LPAREN . expression RPAREN
    (34) expression -> . term PLUS term
    (35) expression -> . term MINUS term
    (36) expression -> . term
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 16
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 22
    term                           shift and go to state 12
    factor                         shift and go to state 15

state 12

    (34) expression -> term . PLUS term
    (35) expression -> term . MINUS term
    (36) expression -> term .

    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    $end            reduce using rule 36 (expression -> term .)
    GT              reduce using rule 36 (expression -> term .)
    LT              reduce using rule 36 (expression -> term .)
    EQEQ            reduce using rule 36 (expression -> term .)
    COLON           reduce using rule 36 (expression -> term .)
    RPAREN          reduce using rule 36 (expression -> term .)
    COMMA           reduce using rule 36 (expression -> term .)
    RBRACKET        reduce using rule 36 (expression -> term .)
    ELSE            reduce using rule 36 (expression -> term .)
    RBRACE          reduce using rule 36 (expression -> term .)


state 13

    (24) list -> LBRACKET . item_list RBRACKET
    (25) item_list -> . value
    (26) item_list -> . value COMMA item_list
    (27) item_list -> . empty
    (8) value -> . expression
    (9) value -> . STRING
    (10) value -> . list
    (11) value -> . dictionary
    (12) value -> . NUMBER
    (13) value -> . ID
    (43) empty -> .
    (34) expression -> . term PLUS term
    (35) expression -> . term MINUS term
    (36) expression -> . term
    (24) list -> . LBRACKET item_list RBRACKET
    (28) dictionary -> . LBRACE pair_list RBRACE
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 29
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    RBRACKET        reduce using rule 43 (empty -> .)
    LBRACKET        shift and go to state 13
    LBRACE          shift and go to state 14
    LPAREN          shift and go to state 11

    item_list                      shift and go to state 25
    value                          shift and go to state 26
    empty                          shift and go to state 27
    expression                     shift and go to state 28
    list                           shift and go to state 30
    dictionary                     shift and go to state 31
    term                           shift and go to state 12
    factor                         shift and go to state 15

state 14

    (28) dictionary -> LBRACE . pair_list RBRACE
    (29) pair_list -> . pair
    (30) pair_list -> . pair COMMA pair_list
    (31) pair_list -> . empty
    (32) pair -> . STRING COLON value
    (33) pair -> . NUMBER COLON value
    (43) empty -> .

    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    RBRACE          reduce using rule 43 (empty -> .)

    pair_list                      shift and go to state 34
    pair                           shift and go to state 35
    empty                          shift and go to state 36

state 15

    (37) term -> factor . TIMES factor
    (38) term -> factor . DIVIDE factor
    (39) term -> factor .

    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            reduce using rule 39 (term -> factor .)
    MINUS           reduce using rule 39 (term -> factor .)
    $end            reduce using rule 39 (term -> factor .)
    GT              reduce using rule 39 (term -> factor .)
    LT              reduce using rule 39 (term -> factor .)
    EQEQ            reduce using rule 39 (term -> factor .)
    COLON           reduce using rule 39 (term -> factor .)
    RPAREN          reduce using rule 39 (term -> factor .)
    COMMA           reduce using rule 39 (term -> factor .)
    RBRACKET        reduce using rule 39 (term -> factor .)
    ELSE            reduce using rule 39 (term -> factor .)
    RBRACE          reduce using rule 39 (term -> factor .)


state 16

    (40) factor -> NUMBER .

    TIMES           reduce using rule 40 (factor -> NUMBER .)
    DIVIDE          reduce using rule 40 (factor -> NUMBER .)
    PLUS            reduce using rule 40 (factor -> NUMBER .)
    MINUS           reduce using rule 40 (factor -> NUMBER .)
    $end            reduce using rule 40 (factor -> NUMBER .)
    GT              reduce using rule 40 (factor -> NUMBER .)
    LT              reduce using rule 40 (factor -> NUMBER .)
    EQEQ            reduce using rule 40 (factor -> NUMBER .)
    COLON           reduce using rule 40 (factor -> NUMBER .)
    RPAREN          reduce using rule 40 (factor -> NUMBER .)
    COMMA           reduce using rule 40 (factor -> NUMBER .)
    RBRACKET        reduce using rule 40 (factor -> NUMBER .)
    ELSE            reduce using rule 40 (factor -> NUMBER .)
    RBRACE          reduce using rule 40 (factor -> NUMBER .)


state 17

    (7) variable_declaration -> ID EQUALS . value
    (8) value -> . expression
    (9) value -> . STRING
    (10) value -> . list
    (11) value -> . dictionary
    (12) value -> . NUMBER
    (13) value -> . ID
    (34) expression -> . term PLUS term
    (35) expression -> . term MINUS term
    (36) expression -> . term
    (24) list -> . LBRACKET item_list RBRACKET
    (28) dictionary -> . LBRACE pair_list RBRACE
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 29
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    LBRACKET        shift and go to state 13
    LBRACE          shift and go to state 14
    LPAREN          shift and go to state 11

    value                          shift and go to state 41
    expression                     shift and go to state 28
    list                           shift and go to state 30
    dictionary                     shift and go to state 31
    term                           shift and go to state 12
    factor                         shift and go to state 15

state 18

    (14) if_else_statement -> IF condition . COLON statement ELSE COLON statement
    (15) if_else_statement -> IF condition . COLON statement

    COLON           shift and go to state 42


state 19

    (16) condition -> expression . GT expression
    (17) condition -> expression . LT expression
    (18) condition -> expression . EQEQ expression
    (19) condition -> expression .

    GT              shift and go to state 43
    LT              shift and go to state 44
    EQEQ            shift and go to state 45
    COLON           reduce using rule 19 (condition -> expression .)


state 20

    (41) factor -> ID .

    TIMES           reduce using rule 41 (factor -> ID .)
    DIVIDE          reduce using rule 41 (factor -> ID .)
    PLUS            reduce using rule 41 (factor -> ID .)
    MINUS           reduce using rule 41 (factor -> ID .)
    GT              reduce using rule 41 (factor -> ID .)
    LT              reduce using rule 41 (factor -> ID .)
    EQEQ            reduce using rule 41 (factor -> ID .)
    COLON           reduce using rule 41 (factor -> ID .)
    RPAREN          reduce using rule 41 (factor -> ID .)
    $end            reduce using rule 41 (factor -> ID .)
    COMMA           reduce using rule 41 (factor -> ID .)
    RBRACKET        reduce using rule 41 (factor -> ID .)
    ELSE            reduce using rule 41 (factor -> ID .)
    RBRACE          reduce using rule 41 (factor -> ID .)


state 21

    (20) function_definition -> DEF ID . LPAREN arg_list RPAREN COLON statement

    LPAREN          shift and go to state 46


state 22

    (42) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 47


state 23

    (34) expression -> term PLUS . term
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 16
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    term                           shift and go to state 48
    factor                         shift and go to state 15

state 24

    (35) expression -> term MINUS . term
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 16
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    term                           shift and go to state 49
    factor                         shift and go to state 15

state 25

    (24) list -> LBRACKET item_list . RBRACKET

    RBRACKET        shift and go to state 50


state 26

    (25) item_list -> value .
    (26) item_list -> value . COMMA item_list

    RBRACKET        reduce using rule 25 (item_list -> value .)
    COMMA           shift and go to state 51


state 27

    (27) item_list -> empty .

    RBRACKET        reduce using rule 27 (item_list -> empty .)


state 28

    (8) value -> expression .

    COMMA           reduce using rule 8 (value -> expression .)
    RBRACKET        reduce using rule 8 (value -> expression .)
    $end            reduce using rule 8 (value -> expression .)
    ELSE            reduce using rule 8 (value -> expression .)
    RBRACE          reduce using rule 8 (value -> expression .)


state 29

    (9) value -> STRING .

    COMMA           reduce using rule 9 (value -> STRING .)
    RBRACKET        reduce using rule 9 (value -> STRING .)
    $end            reduce using rule 9 (value -> STRING .)
    ELSE            reduce using rule 9 (value -> STRING .)
    RBRACE          reduce using rule 9 (value -> STRING .)


state 30

    (10) value -> list .

    COMMA           reduce using rule 10 (value -> list .)
    RBRACKET        reduce using rule 10 (value -> list .)
    $end            reduce using rule 10 (value -> list .)
    ELSE            reduce using rule 10 (value -> list .)
    RBRACE          reduce using rule 10 (value -> list .)


state 31

    (11) value -> dictionary .

    COMMA           reduce using rule 11 (value -> dictionary .)
    RBRACKET        reduce using rule 11 (value -> dictionary .)
    $end            reduce using rule 11 (value -> dictionary .)
    ELSE            reduce using rule 11 (value -> dictionary .)
    RBRACE          reduce using rule 11 (value -> dictionary .)


state 32

    (12) value -> NUMBER .
    (40) factor -> NUMBER .

  ! reduce/reduce conflict for COMMA resolved using rule 12 (value -> NUMBER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 12 (value -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 12 (value -> NUMBER .)
  ! reduce/reduce conflict for ELSE resolved using rule 12 (value -> NUMBER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 12 (value -> NUMBER .)
    COMMA           reduce using rule 12 (value -> NUMBER .)
    RBRACKET        reduce using rule 12 (value -> NUMBER .)
    $end            reduce using rule 12 (value -> NUMBER .)
    ELSE            reduce using rule 12 (value -> NUMBER .)
    RBRACE          reduce using rule 12 (value -> NUMBER .)
    TIMES           reduce using rule 40 (factor -> NUMBER .)
    DIVIDE          reduce using rule 40 (factor -> NUMBER .)
    PLUS            reduce using rule 40 (factor -> NUMBER .)
    MINUS           reduce using rule 40 (factor -> NUMBER .)

  ! COMMA           [ reduce using rule 40 (factor -> NUMBER .) ]
  ! RBRACKET        [ reduce using rule 40 (factor -> NUMBER .) ]
  ! $end            [ reduce using rule 40 (factor -> NUMBER .) ]
  ! ELSE            [ reduce using rule 40 (factor -> NUMBER .) ]
  ! RBRACE          [ reduce using rule 40 (factor -> NUMBER .) ]


state 33

    (13) value -> ID .
    (41) factor -> ID .

  ! reduce/reduce conflict for COMMA resolved using rule 13 (value -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 13 (value -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 13 (value -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 13 (value -> ID .)
  ! reduce/reduce conflict for RBRACE resolved using rule 13 (value -> ID .)
    COMMA           reduce using rule 13 (value -> ID .)
    RBRACKET        reduce using rule 13 (value -> ID .)
    $end            reduce using rule 13 (value -> ID .)
    ELSE            reduce using rule 13 (value -> ID .)
    RBRACE          reduce using rule 13 (value -> ID .)
    TIMES           reduce using rule 41 (factor -> ID .)
    DIVIDE          reduce using rule 41 (factor -> ID .)
    PLUS            reduce using rule 41 (factor -> ID .)
    MINUS           reduce using rule 41 (factor -> ID .)

  ! COMMA           [ reduce using rule 41 (factor -> ID .) ]
  ! RBRACKET        [ reduce using rule 41 (factor -> ID .) ]
  ! $end            [ reduce using rule 41 (factor -> ID .) ]
  ! ELSE            [ reduce using rule 41 (factor -> ID .) ]
  ! RBRACE          [ reduce using rule 41 (factor -> ID .) ]


state 34

    (28) dictionary -> LBRACE pair_list . RBRACE

    RBRACE          shift and go to state 52


state 35

    (29) pair_list -> pair .
    (30) pair_list -> pair . COMMA pair_list

    RBRACE          reduce using rule 29 (pair_list -> pair .)
    COMMA           shift and go to state 53


state 36

    (31) pair_list -> empty .

    RBRACE          reduce using rule 31 (pair_list -> empty .)


state 37

    (32) pair -> STRING . COLON value

    COLON           shift and go to state 54


state 38

    (33) pair -> NUMBER . COLON value

    COLON           shift and go to state 55


state 39

    (37) term -> factor TIMES . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 16
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    factor                         shift and go to state 56

state 40

    (38) term -> factor DIVIDE . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 16
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    factor                         shift and go to state 57

state 41

    (7) variable_declaration -> ID EQUALS value .

    $end            reduce using rule 7 (variable_declaration -> ID EQUALS value .)
    ELSE            reduce using rule 7 (variable_declaration -> ID EQUALS value .)


state 42

    (14) if_else_statement -> IF condition COLON . statement ELSE COLON statement
    (15) if_else_statement -> IF condition COLON . statement
    (1) statement -> . variable_declaration
    (2) statement -> . if_else_statement
    (3) statement -> . function_definition
    (4) statement -> . expression
    (5) statement -> . list
    (6) statement -> . dictionary
    (7) variable_declaration -> . ID EQUALS value
    (14) if_else_statement -> . IF condition COLON statement ELSE COLON statement
    (15) if_else_statement -> . IF condition COLON statement
    (20) function_definition -> . DEF ID LPAREN arg_list RPAREN COLON statement
    (34) expression -> . term PLUS term
    (35) expression -> . term MINUS term
    (36) expression -> . term
    (24) list -> . LBRACKET item_list RBRACKET
    (28) dictionary -> . LBRACE pair_list RBRACE
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    IF              shift and go to state 9
    DEF             shift and go to state 10
    LBRACKET        shift and go to state 13
    LBRACE          shift and go to state 14
    NUMBER          shift and go to state 16
    LPAREN          shift and go to state 11

    statement                      shift and go to state 58
    variable_declaration           shift and go to state 2
    if_else_statement              shift and go to state 3
    function_definition            shift and go to state 4
    expression                     shift and go to state 5
    list                           shift and go to state 6
    dictionary                     shift and go to state 7
    term                           shift and go to state 12
    factor                         shift and go to state 15

state 43

    (16) condition -> expression GT . expression
    (34) expression -> . term PLUS term
    (35) expression -> . term MINUS term
    (36) expression -> . term
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 16
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 59
    term                           shift and go to state 12
    factor                         shift and go to state 15

state 44

    (17) condition -> expression LT . expression
    (34) expression -> . term PLUS term
    (35) expression -> . term MINUS term
    (36) expression -> . term
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 16
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 60
    term                           shift and go to state 12
    factor                         shift and go to state 15

state 45

    (18) condition -> expression EQEQ . expression
    (34) expression -> . term PLUS term
    (35) expression -> . term MINUS term
    (36) expression -> . term
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 16
    ID              shift and go to state 20
    LPAREN          shift and go to state 11

    expression                     shift and go to state 61
    term                           shift and go to state 12
    factor                         shift and go to state 15

state 46

    (20) function_definition -> DEF ID LPAREN . arg_list RPAREN COLON statement
    (21) arg_list -> . ID
    (22) arg_list -> . ID COMMA arg_list
    (23) arg_list -> . empty
    (43) empty -> .

    ID              shift and go to state 62
    RPAREN          reduce using rule 43 (empty -> .)

    arg_list                       shift and go to state 63
    empty                          shift and go to state 64

state 47

    (42) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 42 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 42 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 42 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 42 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 42 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 42 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 42 (factor -> LPAREN expression RPAREN .)
    EQEQ            reduce using rule 42 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 42 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 42 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 42 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 42 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 42 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 42 (factor -> LPAREN expression RPAREN .)


state 48

    (34) expression -> term PLUS term .

    $end            reduce using rule 34 (expression -> term PLUS term .)
    GT              reduce using rule 34 (expression -> term PLUS term .)
    LT              reduce using rule 34 (expression -> term PLUS term .)
    EQEQ            reduce using rule 34 (expression -> term PLUS term .)
    COLON           reduce using rule 34 (expression -> term PLUS term .)
    RPAREN          reduce using rule 34 (expression -> term PLUS term .)
    COMMA           reduce using rule 34 (expression -> term PLUS term .)
    RBRACKET        reduce using rule 34 (expression -> term PLUS term .)
    ELSE            reduce using rule 34 (expression -> term PLUS term .)
    RBRACE          reduce using rule 34 (expression -> term PLUS term .)


state 49

    (35) expression -> term MINUS term .

    $end            reduce using rule 35 (expression -> term MINUS term .)
    GT              reduce using rule 35 (expression -> term MINUS term .)
    LT              reduce using rule 35 (expression -> term MINUS term .)
    EQEQ            reduce using rule 35 (expression -> term MINUS term .)
    COLON           reduce using rule 35 (expression -> term MINUS term .)
    RPAREN          reduce using rule 35 (expression -> term MINUS term .)
    COMMA           reduce using rule 35 (expression -> term MINUS term .)
    RBRACKET        reduce using rule 35 (expression -> term MINUS term .)
    ELSE            reduce using rule 35 (expression -> term MINUS term .)
    RBRACE          reduce using rule 35 (expression -> term MINUS term .)


state 50

    (24) list -> LBRACKET item_list RBRACKET .

    $end            reduce using rule 24 (list -> LBRACKET item_list RBRACKET .)
    COMMA           reduce using rule 24 (list -> LBRACKET item_list RBRACKET .)
    RBRACKET        reduce using rule 24 (list -> LBRACKET item_list RBRACKET .)
    ELSE            reduce using rule 24 (list -> LBRACKET item_list RBRACKET .)
    RBRACE          reduce using rule 24 (list -> LBRACKET item_list RBRACKET .)


state 51

    (26) item_list -> value COMMA . item_list
    (25) item_list -> . value
    (26) item_list -> . value COMMA item_list
    (27) item_list -> . empty
    (8) value -> . expression
    (9) value -> . STRING
    (10) value -> . list
    (11) value -> . dictionary
    (12) value -> . NUMBER
    (13) value -> . ID
    (43) empty -> .
    (34) expression -> . term PLUS term
    (35) expression -> . term MINUS term
    (36) expression -> . term
    (24) list -> . LBRACKET item_list RBRACKET
    (28) dictionary -> . LBRACE pair_list RBRACE
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 29
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    RBRACKET        reduce using rule 43 (empty -> .)
    LBRACKET        shift and go to state 13
    LBRACE          shift and go to state 14
    LPAREN          shift and go to state 11

    value                          shift and go to state 26
    item_list                      shift and go to state 65
    empty                          shift and go to state 27
    expression                     shift and go to state 28
    list                           shift and go to state 30
    dictionary                     shift and go to state 31
    term                           shift and go to state 12
    factor                         shift and go to state 15

state 52

    (28) dictionary -> LBRACE pair_list RBRACE .

    $end            reduce using rule 28 (dictionary -> LBRACE pair_list RBRACE .)
    COMMA           reduce using rule 28 (dictionary -> LBRACE pair_list RBRACE .)
    RBRACKET        reduce using rule 28 (dictionary -> LBRACE pair_list RBRACE .)
    ELSE            reduce using rule 28 (dictionary -> LBRACE pair_list RBRACE .)
    RBRACE          reduce using rule 28 (dictionary -> LBRACE pair_list RBRACE .)


state 53

    (30) pair_list -> pair COMMA . pair_list
    (29) pair_list -> . pair
    (30) pair_list -> . pair COMMA pair_list
    (31) pair_list -> . empty
    (32) pair -> . STRING COLON value
    (33) pair -> . NUMBER COLON value
    (43) empty -> .

    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    RBRACE          reduce using rule 43 (empty -> .)

    pair                           shift and go to state 35
    pair_list                      shift and go to state 66
    empty                          shift and go to state 36

state 54

    (32) pair -> STRING COLON . value
    (8) value -> . expression
    (9) value -> . STRING
    (10) value -> . list
    (11) value -> . dictionary
    (12) value -> . NUMBER
    (13) value -> . ID
    (34) expression -> . term PLUS term
    (35) expression -> . term MINUS term
    (36) expression -> . term
    (24) list -> . LBRACKET item_list RBRACKET
    (28) dictionary -> . LBRACE pair_list RBRACE
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 29
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    LBRACKET        shift and go to state 13
    LBRACE          shift and go to state 14
    LPAREN          shift and go to state 11

    value                          shift and go to state 67
    expression                     shift and go to state 28
    list                           shift and go to state 30
    dictionary                     shift and go to state 31
    term                           shift and go to state 12
    factor                         shift and go to state 15

state 55

    (33) pair -> NUMBER COLON . value
    (8) value -> . expression
    (9) value -> . STRING
    (10) value -> . list
    (11) value -> . dictionary
    (12) value -> . NUMBER
    (13) value -> . ID
    (34) expression -> . term PLUS term
    (35) expression -> . term MINUS term
    (36) expression -> . term
    (24) list -> . LBRACKET item_list RBRACKET
    (28) dictionary -> . LBRACE pair_list RBRACE
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 29
    NUMBER          shift and go to state 32
    ID              shift and go to state 33
    LBRACKET        shift and go to state 13
    LBRACE          shift and go to state 14
    LPAREN          shift and go to state 11

    value                          shift and go to state 68
    expression                     shift and go to state 28
    list                           shift and go to state 30
    dictionary                     shift and go to state 31
    term                           shift and go to state 12
    factor                         shift and go to state 15

state 56

    (37) term -> factor TIMES factor .

    PLUS            reduce using rule 37 (term -> factor TIMES factor .)
    MINUS           reduce using rule 37 (term -> factor TIMES factor .)
    $end            reduce using rule 37 (term -> factor TIMES factor .)
    GT              reduce using rule 37 (term -> factor TIMES factor .)
    LT              reduce using rule 37 (term -> factor TIMES factor .)
    EQEQ            reduce using rule 37 (term -> factor TIMES factor .)
    COLON           reduce using rule 37 (term -> factor TIMES factor .)
    RPAREN          reduce using rule 37 (term -> factor TIMES factor .)
    COMMA           reduce using rule 37 (term -> factor TIMES factor .)
    RBRACKET        reduce using rule 37 (term -> factor TIMES factor .)
    ELSE            reduce using rule 37 (term -> factor TIMES factor .)
    RBRACE          reduce using rule 37 (term -> factor TIMES factor .)


state 57

    (38) term -> factor DIVIDE factor .

    PLUS            reduce using rule 38 (term -> factor DIVIDE factor .)
    MINUS           reduce using rule 38 (term -> factor DIVIDE factor .)
    $end            reduce using rule 38 (term -> factor DIVIDE factor .)
    GT              reduce using rule 38 (term -> factor DIVIDE factor .)
    LT              reduce using rule 38 (term -> factor DIVIDE factor .)
    EQEQ            reduce using rule 38 (term -> factor DIVIDE factor .)
    COLON           reduce using rule 38 (term -> factor DIVIDE factor .)
    RPAREN          reduce using rule 38 (term -> factor DIVIDE factor .)
    COMMA           reduce using rule 38 (term -> factor DIVIDE factor .)
    RBRACKET        reduce using rule 38 (term -> factor DIVIDE factor .)
    ELSE            reduce using rule 38 (term -> factor DIVIDE factor .)
    RBRACE          reduce using rule 38 (term -> factor DIVIDE factor .)


state 58

    (14) if_else_statement -> IF condition COLON statement . ELSE COLON statement
    (15) if_else_statement -> IF condition COLON statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 69
    $end            reduce using rule 15 (if_else_statement -> IF condition COLON statement .)

  ! ELSE            [ reduce using rule 15 (if_else_statement -> IF condition COLON statement .) ]


state 59

    (16) condition -> expression GT expression .

    COLON           reduce using rule 16 (condition -> expression GT expression .)


state 60

    (17) condition -> expression LT expression .

    COLON           reduce using rule 17 (condition -> expression LT expression .)


state 61

    (18) condition -> expression EQEQ expression .

    COLON           reduce using rule 18 (condition -> expression EQEQ expression .)


state 62

    (21) arg_list -> ID .
    (22) arg_list -> ID . COMMA arg_list

    RPAREN          reduce using rule 21 (arg_list -> ID .)
    COMMA           shift and go to state 70


state 63

    (20) function_definition -> DEF ID LPAREN arg_list . RPAREN COLON statement

    RPAREN          shift and go to state 71


state 64

    (23) arg_list -> empty .

    RPAREN          reduce using rule 23 (arg_list -> empty .)


state 65

    (26) item_list -> value COMMA item_list .

    RBRACKET        reduce using rule 26 (item_list -> value COMMA item_list .)


state 66

    (30) pair_list -> pair COMMA pair_list .

    RBRACE          reduce using rule 30 (pair_list -> pair COMMA pair_list .)


state 67

    (32) pair -> STRING COLON value .

    COMMA           reduce using rule 32 (pair -> STRING COLON value .)
    RBRACE          reduce using rule 32 (pair -> STRING COLON value .)


state 68

    (33) pair -> NUMBER COLON value .

    COMMA           reduce using rule 33 (pair -> NUMBER COLON value .)
    RBRACE          reduce using rule 33 (pair -> NUMBER COLON value .)


state 69

    (14) if_else_statement -> IF condition COLON statement ELSE . COLON statement

    COLON           shift and go to state 72


state 70

    (22) arg_list -> ID COMMA . arg_list
    (21) arg_list -> . ID
    (22) arg_list -> . ID COMMA arg_list
    (23) arg_list -> . empty
    (43) empty -> .

    ID              shift and go to state 62
    RPAREN          reduce using rule 43 (empty -> .)

    arg_list                       shift and go to state 73
    empty                          shift and go to state 64

state 71

    (20) function_definition -> DEF ID LPAREN arg_list RPAREN . COLON statement

    COLON           shift and go to state 74


state 72

    (14) if_else_statement -> IF condition COLON statement ELSE COLON . statement
    (1) statement -> . variable_declaration
    (2) statement -> . if_else_statement
    (3) statement -> . function_definition
    (4) statement -> . expression
    (5) statement -> . list
    (6) statement -> . dictionary
    (7) variable_declaration -> . ID EQUALS value
    (14) if_else_statement -> . IF condition COLON statement ELSE COLON statement
    (15) if_else_statement -> . IF condition COLON statement
    (20) function_definition -> . DEF ID LPAREN arg_list RPAREN COLON statement
    (34) expression -> . term PLUS term
    (35) expression -> . term MINUS term
    (36) expression -> . term
    (24) list -> . LBRACKET item_list RBRACKET
    (28) dictionary -> . LBRACE pair_list RBRACE
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    IF              shift and go to state 9
    DEF             shift and go to state 10
    LBRACKET        shift and go to state 13
    LBRACE          shift and go to state 14
    NUMBER          shift and go to state 16
    LPAREN          shift and go to state 11

    statement                      shift and go to state 75
    variable_declaration           shift and go to state 2
    if_else_statement              shift and go to state 3
    function_definition            shift and go to state 4
    expression                     shift and go to state 5
    list                           shift and go to state 6
    dictionary                     shift and go to state 7
    term                           shift and go to state 12
    factor                         shift and go to state 15

state 73

    (22) arg_list -> ID COMMA arg_list .

    RPAREN          reduce using rule 22 (arg_list -> ID COMMA arg_list .)


state 74

    (20) function_definition -> DEF ID LPAREN arg_list RPAREN COLON . statement
    (1) statement -> . variable_declaration
    (2) statement -> . if_else_statement
    (3) statement -> . function_definition
    (4) statement -> . expression
    (5) statement -> . list
    (6) statement -> . dictionary
    (7) variable_declaration -> . ID EQUALS value
    (14) if_else_statement -> . IF condition COLON statement ELSE COLON statement
    (15) if_else_statement -> . IF condition COLON statement
    (20) function_definition -> . DEF ID LPAREN arg_list RPAREN COLON statement
    (34) expression -> . term PLUS term
    (35) expression -> . term MINUS term
    (36) expression -> . term
    (24) list -> . LBRACKET item_list RBRACKET
    (28) dictionary -> . LBRACE pair_list RBRACE
    (37) term -> . factor TIMES factor
    (38) term -> . factor DIVIDE factor
    (39) term -> . factor
    (40) factor -> . NUMBER
    (41) factor -> . ID
    (42) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 8
    IF              shift and go to state 9
    DEF             shift and go to state 10
    LBRACKET        shift and go to state 13
    LBRACE          shift and go to state 14
    NUMBER          shift and go to state 16
    LPAREN          shift and go to state 11

    statement                      shift and go to state 76
    variable_declaration           shift and go to state 2
    if_else_statement              shift and go to state 3
    function_definition            shift and go to state 4
    expression                     shift and go to state 5
    list                           shift and go to state 6
    dictionary                     shift and go to state 7
    term                           shift and go to state 12
    factor                         shift and go to state 15

state 75

    (14) if_else_statement -> IF condition COLON statement ELSE COLON statement .

    $end            reduce using rule 14 (if_else_statement -> IF condition COLON statement ELSE COLON statement .)
    ELSE            reduce using rule 14 (if_else_statement -> IF condition COLON statement ELSE COLON statement .)


state 76

    (20) function_definition -> DEF ID LPAREN arg_list RPAREN COLON statement .

    $end            reduce using rule 20 (function_definition -> DEF ID LPAREN arg_list RPAREN COLON statement .)
    ELSE            reduce using rule 20 (function_definition -> DEF ID LPAREN arg_list RPAREN COLON statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 58 resolved as shift
WARNING: reduce/reduce conflict in state 32 resolved using rule (value -> NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 32
WARNING: reduce/reduce conflict in state 33 resolved using rule (value -> ID)
WARNING: rejected rule (factor -> ID) in state 33
